
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

;; This is a workaround to get the elpa directory which is created by nix
(when (string= (system-name) "nixos")
  (progn
    (setq nix-elpa-path (concat (replace-regexp-in-string "\r?\n$" "" (shell-command-to-string "nix-store -q --requisites $(readlink $(readlink $(which emacs))) | grep emacs-packages-deps")) "/share/emacs/site-lisp/elpa/"))
    (let ((default-directory nix-elpa-path))
      (normal-top-level-add-subdirs-to-load-path))
    (add-to-list 'package-directory-list nix-elpa-path)

    (dolist (theme-path (directory-files nix-elpa-path nil "theme"))
      (add-to-list 'custom-theme-load-path (concat nix-elpa-path "/" theme-path))
      )
    )
  )

(package-initialize)
;; I suggest to keep these comment lines, too
;; below you will see customization automatically added by Emacs

(require 'use-package)

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
;(load-theme 'atom-one-light t)
(load-theme 'one-light t)


;; ;; Xah fly keys
;; (use-package xah-fly-keys
;;   :config
;;   (xah-fly-keys-set-layout "neo2")
;;   (xah-fly-keys 1)
;;   :custom
;;   (xah-fly-use-meta-key nil)
;;   :bind
;;   (("<f4>" . xah-fly-mode-toggle)
;;    ("M-SPC" . #'xah-fly-command-mode-activate))
;; )

;; (defun xah-fly-keys-command-mode-on ()
;;   (define-key xah-fly-command-map (kbd "b") #'swiper))

;; (add-hook 'xah-fly-command-mode-activate-hook #'xah-fly-keys-command-mode-on)

;; (defun xah-fly-keys-insert-mode-on ()
;;   (define-key xah-fly-insert-map (kbd "<home>") #'move-beginning-of-line))

;; (add-hook 'xah-fly-insert-mode-activate-hook #'xah-fly-keys-insert-mode-on)

;; (remove-hook 'minibuffer-exit-hook 'xah-fly-command-mode-activate)



;(load "~/.emacs.d/plugins/htmlize.el")
(require 'htmlize)

;; Latex Auctex
(setq-default TeX-engine 'xetex)
(setq TeX-parse-self t)
(setq TeX-auto-save t)
(setq TeX-output-dir "output")
(setq TeX-view-program-selection '((output-pdf "Sioyek")))


;; Org and Org-roam
(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done 'time)
(setq org-agenda-files (list "/sharedfolders/Syncthing/Dokumente/Notizen/Allgemein.org"
			     "/sharedfolders/Syncthing/Dokumente/Notizen/journals"))

(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
(add-to-list 'org-latex-packages-alist
             '("AUTO" "babel" t ("pdflatex" "xelatex" "lualatex")))

;(load "~/.emacs.d/calendar/org-caldav")
;(require 'org-caldav)
;(setq org-caldav-url "http://omvnas:5232/alexander")
;(setq org-caldav-calendar-id "66b63628-b368-6e00-a031-d18ae03f77f9")
;(setq org-caldav-inbox "~/Dokumente/Notizen/Caldav_Inbox.org")
;(setq org-caldav-files org-agenda-files)

(setq org-support-shift-select 'always)
;(add-hook 'org-shiftup-final-hook 'windmove-up)
;(add-hook 'org-shiftleft-final-hook 'windmove-left)
;(add-hook 'org-shiftdown-final-hook 'windmove-down)
;(add-hook 'org-shiftright-final-hook 'windmove-right)
(add-hook 'org-mode-hook '(lambda ()
			     (visual-line-mode)
			     (org-indent-mode)))
(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c <left>")  'windmove-left)
            (local-set-key (kbd "C-c <right>") 'windmove-right)
            (local-set-key (kbd "C-c <up>")    'windmove-up)
            (local-set-key (kbd "C-c <down>")  'windmove-down)))
;(add-hook 'org-mode-hook #'toggle-word-wrap)

;; Org-export
(defun org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
  (unless pub-dir
    (setq pub-dir (concat "org_export_" (substring extension 1)))
    (unless (file-directory-p pub-dir)
      (make-directory pub-dir)))
  (apply orig-fun extension subtreep pub-dir nil))
(advice-add 'org-export-output-file-name :around #'org-export-output-file-name-modified)

(setq org-latex-compiler "lualatex") ;; this needs revision
(setq org-latex-pdf-process '("latexmk -lualatex -interaction=nonstopmode -output-directory=%o %f"))
;(dolist (ltx_pkg '(("" "fontspec") ("" "xunicode") ("" "unicode-math"))) 
;  (add-to-list 'org-latex-packages-alist ltx_pkg))

;; Latex Koma-Script classes
(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-classes
               '("scrartcl"
		 "\\documentclass{scrartcl}
\\usepackage{fontspec}
\\setmainfont[
  SmallCapsFont={Alegreya SC},
  UprightFeatures={SmallCapsFont=AlegreyaSC-Regular},
  ItalicFeatures={SmallCapsFont=AlegreyaSC-Italic},
  BoldFeatures={SmallCapsFont=AlegreyaSC-Bold},
  BoldItalicFeatures={SmallCapsFont=AlegreyaSC-BoldItalic},
  Ligatures=TeX,
]{Alegreya}
\\setsansfont[
  Extension=.otf,
  UprightFont=*-Regular,
  ItalicFont=*-Italic,
  BoldFont=*-Bold,
  UprightFeatures={SmallCapsFont=*SC-Regular},
  ItalicFeatures={SmallCapsFont=*SC-Italic},
  BoldFeatures={SmallCapsFont=*SC-Bold},
  BoldItalicFeatures={SmallCapsFont=*SC-BoldItalic},
]{AlegreyaSans}

\\usepackage{amsmath}
\\usepackage{amssymb}
\\usepackage{unicode-math}

\\setmathfont{Asana-Math.otf}
\\setmathrm{Alegreya}
\\setmathfont[range=it]{Alegreya-Italic}
\\setmathfont[range=bfit]{Alegreya-BoldItalic}
\\setmathfont[range={}]{Asana-Math.otf}
\\setmonofont[Scale=0.9]{Iosevka Nerd Font}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("scrreprt" "\\documentclass{scrreprt}
\\usepackage{fontspec}
\\setmainfont[
  SmallCapsFont={Alegreya SC},
  UprightFeatures={SmallCapsFont=AlegreyaSC-Regular},
  ItalicFeatures={SmallCapsFont=AlegreyaSC-Italic},
  BoldFeatures={SmallCapsFont=AlegreyaSC-Bold},
  BoldItalicFeatures={SmallCapsFont=AlegreyaSC-BoldItalic},
  Ligatures=TeX,
]{Alegreya}
\\setsansfont[
  Extension=.otf,
  UprightFont=*-Regular,
  ItalicFont=*-Italic,
  BoldFont=*-Bold,
  UprightFeatures={SmallCapsFont=*SC-Regular},
  ItalicFeatures={SmallCapsFont=*SC-Italic},
  BoldFeatures={SmallCapsFont=*SC-Bold},
  BoldItalicFeatures={SmallCapsFont=*SC-BoldItalic},
]{AlegreyaSans}

\\usepackage{amsmath}
\\usepackage{amssymb}
\\usepackage{unicode-math}

\\setmathfont{Asana-Math.otf}
\\setmathrm{Alegreya}
\\setmathfont[range=it]{Alegreya-Italic}
\\setmathfont[range=bfit]{Alegreya-BoldItalic}
\\setmathfont[range={}]{Asana-Math.otf}
\\setmonofont[Scale=0.9]{Iosevka Nerd Font}"
		 ("\\chapter{%s}". "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("beamer" "\\documentclass{beamer}
\\usepackage{fontspec}
\\usepackage{amsmath}
\\usepackage{amssymb}
\\usepackage{unicode-math}"
		 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

;; Org babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((org . t)))

;; see https://emacs.stackexchange.com/questions/30341/how-do-i-customize-the-process-that-gets-triggered-in-org-preview-latex-fragment
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;;'(org-agenda-files
 ;;  '("~/Dokumente/Notizen/Allgemein.org" "/home/alexander/Dokumente/Notizen/journals/2022-04-24.org" "/home/alexander/Dokumente/Notizen/journals/2022-04-16.org" "/home/alexander/Dokumente/Notizen/journals/2022-04-14.org" "/home/alexander/Dokumente/Notizen/journals/2022-04-13.org" "/home/alexander/Dokumente/Notizen/journals/2022-04-10.org" "/home/alexander/Dokumente/Notizen/journals/2022-04-09.org" "/home/alexander/Dokumente/Notizen/journals/2022-04-08.org"))
 '(org-icalendar-alarm-time 2880)
 '(org-icalendar-categories '(all-tags all-tags))
 '(org-icalendar-use-deadline '(event-if-not-todo event-if-todo-not-done todo-due))
 '(org-icalendar-use-scheduled '(event-if-not-todo event-if-todo-not-done todo-start))
 '(org-link-frame-setup
   '((vm . vm-visit-folder-other-frame)
     (vm-imap . vm-visit-imap-folder-other-frame)
     (gnus . org-gnus-no-new-news)
     (file . find-file)
     (wl . wl-other-frame)))
 '(org-preview-latex-process-alist
   '((dvipng :programs
	     ("lualatex" "dvipng")
	     :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
	     (1.0 . 1.0)
	     :latex-compiler
	     ("lualatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
	     :image-converter
	     ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
     (dvisvgm :programs
	      ("latex" "dvisvgm")
	      :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
	      (1.7 . 1.5)
	      :latex-compiler
	      ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
	      :image-converter
	      ("dvisvgm %f -n -b min -c %S -o %O"))
     (imagemagick :programs
		  ("latex" "convert")
		  :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust
		  (1.0 . 1.0)
		  :latex-compiler
		  ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
		  :image-converter
		  ("convert -density %D -trim -antialias %f -quality 100 %O"))))
 '(package-selected-packages
   '(embark consult affe notmuch vterm vterm-toggle dired-hide-dotfiles diredfl all-the-icons all-the-icons-dired restart-emacs svg-tag-mode rainbow-delimiters elisp-slime-nav rg quelpa-use-package org-journal ox-reveal lsp-ui company lsp-julia lsp-mode lv markdown-mode ht dash-functional quelpa julia-mode olivetti counsel swiper ivy one-themes org-roam auctex undo-tree fsharp-mode eglot-fsharp eglot-jl nix-mode))
 '(safe-local-variable-values
   '((eval progn
	   (setq-local org-roam-directory "~/Dokumente/Notizen/")
	   (setq-local org-roam-db-location "~/Dokumente/Notizen/org-roam.db")
	   (setq-local org-roam-file-exclude-regexp
		       (rx ".stversions"))
	   (setq-local org-roam-capture-templates
		       '(("d" "default" plain "%?" #'org-roam-capture--get-point "%?" :target
			  (file+head "pages/${slug}.org" "#+title: ${title}")
			  :unnarrowed t)))))))
(setq org-preview-latex-default-process 'dvisvgm)


;(load "~/.emacs.d/plugins/org-bullets.el")
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;;; Org-roam
;;; Tell Emacs to start org-roam-mode when Emacs starts
(add-hook 'after-init-hook 'org-roam-setup)

(if (string= (system-name) "UniLaptop")
  (setq org-roam-directory "~/Uni")
  (setq org-roam-directory "/sharedfolders/Syncthing/Dokumente/Geistliches/Schreiben")
)
(setq org-roam-v2-ack t)

(org-roam-db-autosync-mode)
(setq org-roam-completion-everywhere t)


;;; Define key bindings for Org-roam
;(global-set-key (kbd "C-c n r") #'org-roam-buffer-toggle-display)
;(global-set-key (kbd "C-c n i") #'org-roam-insert)
;(global-set-key (kbd "C-c n /") #'org-roam-find-file)
;(global-set-key (kbd "C-c n b") #'org-roam-switch-to-buffer)
;(global-set-key (kbd "C-c n d") #'org-roam-find-directory)
(global-set-key (kbd "C-c n l") #'org-roam-buffer-toggle)
(global-set-key (kbd "C-c n f") #'org-roam-node-find)
(global-set-key (kbd "C-c n i") #'org-roam-node-insert)
(global-set-key (kbd "C-M-q") #'completion-at-point)
(global-set-key (kbd "C-c n d") #'org-roam-dailies-map)
;(with-eval-after-load 'org
;  (define-key org-mode-map (kbd "C-M-q") #'completion-at-point))
;(use-package org
;  :bind (:map org-mode-map
;         ("C-M i" . completion-at-point)))
(unless (string= (system-name) "UniLaptop")
  (progn
    (require 'org-roam-dailies)
    (setq org-roam-dailies-directory "Bibelstudium/journals/")
    ;;(setq org-roam-capture-templates
    ;;'(("d" "default" plain
    ;;    #'org-roam-capture--get-point "%?"
    ;;    :file-name "pages/${slug}" :head "#+title: ${title}\n" :unnarrowed t)))
    (setq org-roam-capture-templates
    '(("d" "default" plain "%?"
        #'org-roam-capture--get-point "%?"
        :target (file+head "Bibelstudium/Themen/${slug}.org"
                          "#+title: ${title}\n")
        :unnarrowed t)))
  )
)

    
;; Org-journal
(setq org-journal-dir "/sharedfolders/Syncthing/Dokumente/Notizen/journals/")
(setq org-journal-file-format "%Y-%m-%d.org")
(setq org-journal-date-format "%A, %d.%m.%Y")
(setq org-journal-time-prefix "* ")
(setq org-journal-date-prefix "#+title: ")

;(setq org-journal-enable-agenda-integration t
;      org-icalendar-store-UID t
(setq org-icalendar-include-todo 'all
      org-icalendar-combined-agenda-file "/sharedfolders/Syncthing/Dokumente/Notizen/journals/org-journal.ics")

;; Org-refile
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
(setq org-refile-allow-creating-parent-nodes 'confirm)
    

;; Org-reveal
(setq org-reveal-root "file:///home/alexander/Programme/reveal.js-master")


;; YASnippet
(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("~/Dokumente/Vorlagen/snippets"))
  (yas-global-mode 1)
)

;; Vertico, marginalia, embark
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Corfu: completion with TAB
  (setq tab-always-indent 'complete)
  )

;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(use-package consult
  :bind
  (("C-s" . consult-line))
  )

(use-package marginalia
  :init
  (marginalia-mode))


;; Corfu
(use-package corfu
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode))

;; Cape
;; Add extensions
(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p i" . cape-ispell)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )

;; Affe
(use-package affe
  :config
  ;; Manual preview key for `affe-grep'
  ;; (consult-customize affe-grep :preview-key (kbd "M-."))
  (setq affe-count 200)
  (defun affe-orderless-regexp-compiler (input _type _ignorecase)
   (setq compiled_input (orderless-pattern-compiler input))
   (cons compiled_input (lambda (str) (orderless--highlight compiled_input str))))
 (setq affe-regexp-compiler #'affe-orderless-regexp-compiler))


;; ;; Ivy,Counsel, & Swiper
;; ;; Enable Ivy mode in general
;; (ivy-mode 1)
;; (setq ivy-use-virtual-buffers t)
;; (setq enable-recursive-minibuffers t)

;; ;; Add Counsel and Swiper search functions
;; (global-set-key (kbd "C-c f r") #'counsel-recentf)
;; ;;(global-set-key (kbd "C-s") #'swiper)
;; (global-set-key (kbd "C-s") #'swiper)
;; (global-set-key (kbd "C-c r") #'counsel-rg)

;; ;; Replace default "M-x" and "C-x C-f" with Counsel version
;; (global-set-key (kbd "M-x") #'counsel-M-x)
;; (global-set-key (kbd "C-x C-f") #'counsel-find-file)
;; (global-set-key (kbd "C-c x f") #'counsel-fzf)

;; Optionally, you can replace these default functions with Counsel version, too
;;(global-set-key (kbd "C-h f") 'counsel-describe-function)
;;(global-set-key (kbd "C-h v") 'counsel-describe-variable)


;; Olivetti
;; Look & Feel for long-form writing

;; Set the body text width
(setq olivetti-body-width 120)

;; Enable Olivetti for text-related mode such as Org Mode
(add-hook 'text-mode-hook 'olivetti-mode)


;;; Let's also assign C-z to undo here
(global-set-key (kbd "C-z") 'undo) ;Emacs default is bound to hide Emacs.
;;; Turn off beep
(setq visible-bell t)
(setq ring-bell-function 'ignore)

;; Font
;(set-face-attribute 'default nil  :font "-CTDB-Fira Mono-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1")
;(add-to-list 'default-frame-alist '(font . "-CTDB-Fira Mono-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1"))
;(add-to-list 'default-frame-alist '(font . "Iosevka" height . 120))
;(set-face-attribute 'default nil  :font "Iosevka"  :height 120)
(setq default-frame-alist '((font . "Iosevka Nerd Font-12:spacing=90")))

;; Optional additional aesthetic changes
;; Adapted from `sanity.el' in Elegant Emacs by Nicolas P. Rougier (rougier)
;; https://github.com/rougier/elegant-emacs

;; (setq inhibit-startup-screen t)
;; (setq inhibit-startup-echo-area-message t)
;; (setq inhibit-startup-message t)
;; (setq initial-scratch-message nil)
;; (setq initial-major-mode 'org-mode)
;; (setq-default indent-tabs-mode nil)
;; (setq pop-up-windows nil)
;; (tool-bar-mode 0) 
;; (tooltip-mode  0)
;; (scroll-bar-mode 0)
;;(menu-bar-mode 1) ;menu bar is explicitly turned on for beginners. Change the value to 0.

;; Optional aditional aesthetic changes
;; Adapted from `elegance.el' in Elegant Emacs by Nicolas P. Rougier (rougier)
;; https://github.com/rougier/elegant-emacs

;; Line cursor and no blink
(set-default 'cursor-type  '(bar . 1))
;;(blink-cursor-mode 0)

;; Line spacing, can be 0 for code and 1 or 2 for text
;;(setq-default line-spacing 0)

;; Underline line at descent position, not baseline position
(setq x-underline-at-descent-line t)

;; Rainbow delimiter (parentheses)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)


;; Wind Move windmove
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)

;; Other key bindings
(global-set-key (kbd "M-c")  'calendar)


(use-package svg-tag-mode
  :config
  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{2\\}")
  (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  (defun svg-progress-percent (value)
    (svg-image (svg-lib-concat
		(svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                      nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
		(svg-lib-tag (concat value "%")
                             nil :stroke 0 :margin 0)) :ascent 'center))

  (defun svg-progress-count (value)
    (let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
      (svg-image (svg-lib-concat
		  (svg-lib-progress-bar (/ count total) nil
					:margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
		  (svg-lib-tag value nil
                               :stroke 0 :margin 0)) :ascent 'center)))

  (setq svg-tag-tags
	`(
          ;; Org tags
          (":\\([A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
          (":\\([A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))
          
          ;; Task priority
          ("\\[#[A-Z]\\]" . ( (lambda (tag)
				(svg-tag-make tag :face 'org-priority 
                                              :beg 2 :end -1 :margin 0))))

          ;; Progress
          ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                              (svg-progress-percent (substring tag 1 -2)))))
          ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                            (svg-progress-count (substring tag 1 -1)))))
          
          ;; TODO / DONE
          ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
          ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))
	  
          ;; Active date (with or without day name, with or without time)
          (,(format "\\(<%s>\\)" date-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0))))
          (,(format "\\(<%s \\)%s>" date-re day-time-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
          (,(format "<%s \\(%s>\\)" date-re day-time-re) .
           ((lambda (tag)
              (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

          ;; Inactive date  (with or without day name, with or without time)
          (,(format "\\(\\[%s\\]\\)" date-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
          (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
          (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
           ((lambda (tag)
              (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))))
  :hook org-mode)


;; Dired
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

 (use-package dired
      :hook
      (dired-mode . dired-hide-details-mode)
      :config
      (dired-async-mode 1)
      (setq dired-listing-switches "-Alh1vD --group-directories-first")
      (setq wdired-allow-to-change-permissions t)
      (setq delete-by-moving-to-trash t)
      :bind (:map dired-mode-map
		  ("C-c o" . dired-open-file)))

(use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . all-the-icons-dired-mode)
  :config (setq all-the-icons-dired-monochrome nil))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :bind (:map dired-mode-map
	      ("H" . dired-hide-dotfiles-mode)))

;; Vterm
(use-package vterm
  :commands vterm
  :config
  (setq vterm-max-scrollback 10000)
  (setq vterm-buffer-name-string "vterm %s"))

(use-package vterm-toggle
  :bind (("M-t" . vterm-toggle)
	 ("M-+" . vterm-toggle-show)
	 :map vterm-mode-map
	 ("M-t" . vterm-toggle-hide))
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3))))


;; Notmuch email
(use-package notmuch
  :config
  (add-to-list 'auto-mode-alist '("alexding97@gmail.com" . notmuch-message-mode)))

(use-package undo-tree)

;; Eglot / LSP stuff
(use-package fsharp-mode
  :defer t)

(use-package eglot-fsharp)

(use-package eglot-jl)

(use-package nix-mode
  :mode "\\.nix\\'")

(use-package python-mode
  :mode "\\.py\\'")

(add-to-list 'eglot-server-programs '(nix-mode . ("rnix-lsp")))

;; Ligatures
(use-package ligature
  :config
  ;; Enable all Iosevka ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
                                       "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
                                       "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
                                       ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))


;; (quelpa
;;  '(quelpa-use-package
;;    :fetcher git
;;    :url "https://github.com/quelpa/quelpa-use-package.git"))
;; (require 'quelpa-use-package)


;; Agda
; (load-file (let ((coding-system-for-read 'utf-8))
;                 (shell-command-to-string "agda-mode locate")))

;; Quelpa
(setq quelpa-upgrade-interval 14)
(add-hook #'after-init-hook #'quelpa-upgrade-all-maybe)
;(setq quelpa-update-melpa-p nil)
;(setq quelpa-checkout-melpa-p nil)

;; Straight
(setq package-enable-at-startup nil)
(defvar bootstrap-version)
(setq straight-repository-branch "develop")
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Copilot
(use-package copilot
  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
  :ensure
  t
  :hook
  (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
	 ("C-<tab>" . 'copilot-accept-completion-by-word)
	 :map copilot-completion-map
	 ("C-<iso-lefttab>" . 'copilot-accept-completion)))


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'dired-find-alternate-file 'disabled nil)
